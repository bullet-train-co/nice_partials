version: 2.1
orbs:
  ruby: circleci/ruby@2.0.0
  browser-tools: circleci/browser-tools@1.4.1
aliases:
  - &restore_yarn_cache
      name: Restore Yarn cache
      keys:
        - yarn-packages-v1-{{ .Environment.CIRCLE_WORKING_DIRECTORY }}-{{ .Branch }}-{{ checksum "yarn.lock" }}
        - yarn-packages-v1-{{ .Environment.CIRCLE_WORKING_DIRECTORY }}-{{ .Branch }}-
        - yarn-packages-
  - &save_yarn_cache
      name: Save Yarn cache
      key: yarn-packages-v1-{{ .Environment.CIRCLE_WORKING_DIRECTORY }}-{{ .Branch }}-{{ checksum "yarn.lock" }}
      paths:
        - node_modules
  - &ruby_node_browsers_docker_image
      - image: cimg/ruby:3.2.2-browsers
        environment:
          PGHOST: localhost
          PGUSER: untitled_application
          RAILS_ENV: test
  - &postgres_docker_image
      - image: circleci/postgres
        environment:
          POSTGRES_HOST_AUTH_METHOD: trust
          POSTGRES_DB: untitled_application_test
          POSTGRES_USER: untitled_application
  - &wait_for_docker
      # We run this because the DB might not be available for a while due to a race condition.
      run: dockerize -wait tcp://localhost:5432 -timeout 1m
jobs:
  'Local Minitest':
    # docker:
    #   - <<: *ruby_node_browsers_docker_image
    #   - <<: *postgres_docker_image
    #   - image: circleci/redis
    executor: ruby/default
    steps:
      - checkout

      - ruby/install-deps:
          clean-bundle: true
      - run:
          name: Run unit tests
          command: bin/test

  'Local Minitest with Rails main':
    environment:
      RAILS_MAIN: true
    executor: ruby/default
    steps:
      - checkout

      - run: "sudo gem update --system --no-document" # Install newer Bundler to use a shallow Rails checkout.
      - run: bundle lock --update=rails

      - ruby/install-deps:
          clean-bundle: true

      - run:
          name: Run unit tests
          command: bin/test

  'Local Standard Ruby':
    docker:
      - <<: *ruby_node_browsers_docker_image
    steps:
      - checkout

      # TODO Figure out how to make these work for `tmp/starter`
      # # Restore dependency caches
      # - restore_cache: *restore_bundler_cache
      # - restore_cache: *restore_yarn_cache

      # Install dependencies
      - ruby/install-deps:
          clean-bundle: true
      - run: yarn install

      # # Save dependency caches
      # # We only do this as part of this job, because it's time consuming and we don't want it to slow down test runners.
      # - save_cache: *save_bundler_cache
      # - save_cache: *save_yarn_cache

      - run:
          name: Check Standard Ruby
          command: bundle exec standardrb

  'Starter Repo Minitest':
    docker:
      - <<: *ruby_node_browsers_docker_image
      - <<: *postgres_docker_image
      - image: circleci/redis
    executor: ruby/default
    working_directory: tmp/starter
    parallelism: 16
    steps:
      - checkout:
          path: ~/project

      - run: export FIREFOX_VERSION=$(firefox --version)
      - browser-tools/install-browser-tools:
          firefox-version: $FIREFOX_VERSION

      - run: rm LICENSE.chromedriver
      - run: git clone --depth 1 https://github.com/bullet-train-co/bullet_train.git .

      - run:
          name: Link starter repository to the Ruby gem being tested.
          command: |
            grep -v 'gem "nice_partials"' Gemfile > Gemfile.tmp
            mv Gemfile.tmp Gemfile
            echo 'gem "nice_partials", path: "../.."' >> Gemfile
      - run: bundle lock --update=nice_partials

      - ruby/install-deps:
          clean-bundle: true

      - restore_cache: *restore_yarn_cache
      - restore_cache:
          name: Restore yarn build:css cache
          keys:
            - yarn-build-css-v3-{{ .Branch }}-{{ checksum "yarn.lock" }}

      # Install dependencies
      - run: "yarn install"
      - run: "yarn build:css"

      - save_cache: *save_yarn_cache
      - save_cache:
          name: Save yarn build:css cache
          key: yarn-build-css-v3-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths:
            - app/assets/builds/application.light.css
            - app/assets/builds/application.mailer.light.css

      - *wait_for_docker

      - run:
          name: Run tests with Knapsack Pro
          command: bundle exec rails "knapsack_pro:queue:minitest[--verbose]"
          environment:
            KNAPSACK_PRO_CI_NODE_TOTAL: 16
            RAILS_ENV: test
            SKIP_RESOLVE_TEST: 1

      # If you don't want to use Knapsack Pro, then use this configuration:
      #
      # - run:
      #     name: Run unit tests
      #     command: bundle exec rails test
      # - run:
      #     name: Run system tests
      #     command: bundle exec rails test:system
      #
      # If you want to gather test results in CircleCI when not running tests in parallel,
      # include `minitest-ci` in your Gemfile and uncomment the following step.
      # You can access the test results via the "Tests" tab within each build in CircleCI.
      #
      # - store_test_results:
      #     path: test/reports

workflows:
  version: 2
  build:
    jobs:
      - 'Local Minitest'
      - 'Local Minitest with Rails main'
      # TODO Enable this when we're sure it won't cause a bunch of conflicts on PRs.
      # - 'Local Standard Ruby'
      - 'Starter Repo Minitest'
